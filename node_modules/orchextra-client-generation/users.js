'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var axios = require('axios');
var api = 'v1/users';
var queryFn = require('./fn/QueryString');

module.exports = function () {
  function User(url, token, user) {
    _classCallCheck(this, User);

    this.url = url;
    this.token = token;
    if (typeof user !== 'undefined') {
      this.data = user;
    }
  }

  _createClass(User, [{
    key: 'getUsers',
    value: function getUsers(query) {
      var _this = this;

      var queryString = queryFn.setQueryString(query);
      var users = axios.get(this.url + '/' + api + '?' + queryString, {
        headers: { 'Authorization': 'Bearer ' + this.token }
      });

      return users.then(function (result) {
        var Users = new Array();
        result.data.forEach(function (user) {
          Users.push(new User(_this.url, _this.token, user));
        });
        return Users;
      }).catch(function (error) {
        return {
          statusCode: error.response.status,
          errors: error.response.data
        };
      });
    }
  }, {
    key: 'getUser',
    value: function getUser(userId, query) {
      var _this2 = this;

      var queryString = queryFn.setQueryString(query);
      var user = axios.get(this.url + '/' + api + '/' + userId + '?' + queryString, {
        headers: { 'Authorization': 'Bearer ' + this.token }
      });

      return user.then(function (result) {
        return new User(_this2.url, _this2.token, result.data);
      }).catch(function (error) {
        console.log(error);
        return error.response.status;
      });
    }
  }, {
    key: 'createUser',
    value: function createUser(user) {
      var _this3 = this;

      var add = axios.post(this.url + '/' + api, user, {
        headers: { 'Authorization': 'Bearer ' + this.token }
      });

      return add.then(function (result) {
        // return result.data;
        return new User(_this3.url, _this3.token, result.data);
      }).catch(function (error) {
        return {
          statusCode: error.response.status,
          errors: error.response.data
        };
      });
    }
  }, {
    key: 'deleteUser',
    value: function deleteUser(userId) {
      if (typeof userId === 'undefined') {
        userId = this.data.id;
      }
      var del = axios.delete(this.url + '/' + api + '/' + userId, {
        headers: { 'Authorization': 'Bearer ' + this.token }
      });

      return del.then(function (result) {
        return result.status;
      }).catch(function (error) {
        return {
          statusCode: error.response.status,
          errors: error.response.data
        };
      });
    }
  }, {
    key: 'replaceUser',
    value: function replaceUser(user, userId) {
      var _this4 = this;

      if (typeof userId === 'undefined') {
        userId = this.data.id;
      }
      var replace = axios.put(this.url + '/' + api + '/' + userId, user, {
        headers: { 'Authorization': 'Bearer ' + this.token }
      });

      return replace.then(function (result) {
        _this4.data = result.data;
        return _this4;
      }).catch(function (error) {
        return {
          statusCode: error.response.status,
          errors: error.response.data
        };
      });
    }
  }, {
    key: 'updateUser',
    value: function updateUser(user, userId) {
      var _this5 = this;

      if (typeof userId === 'undefined') {
        userId = this.data.id;
      }
      if (typeof user === 'undefined') {
        user = this.data;
      }
      var update = axios.patch(this.url + '/' + api + '/' + userId, user, {
        headers: { 'Authorization': 'Bearer ' + this.token }
      });

      return update.then(function (result) {
        _this5.data = result.data;
        return _this5;
      }).catch(function (error) {
        return {
          statusCode: error.response.status,
          errors: error.response.data
        };
      });
    }
  }]);

  return User;
}();

// console.log(new User('https://generation-api-coupons.s.gigigoapps.com', 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJwdWJsaWNJZCI6IjU5MmVlODQxYjQ2YzJjYmRjMmFjZTU4ZCIsIm5hbWUiOiJEYXNoYm9hcmQiLCJ0eXBlIjoiZ2VuZXJhdGlvbiIsImxhc3RSZXF1ZXN0IjoiMjAxNy0wNi0xNFQyMToxNzowMS44NDdaIiwiaWF0IjoxNDk3NDc1MDIxfQ.VVUEnTb0s0cw-X4hTmOj4t822LkyGnlhAeOUKUBEikI'));

//
// module.exports ={
//   getUsers,
//   getUser,
//   createUser,
//   deleteUser,
//   replaceUser,
//   setUrl,
//   setAuthToken
// };