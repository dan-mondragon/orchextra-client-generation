'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var axios = require('axios');
var rp = require('request-promise');
var FormData = require('form-data');
var api = 'v1/skins';
var queryFn = require('./fn/QueryString');

module.exports = function () {
  function Skin(url, token, skin) {
    _classCallCheck(this, Skin);

    this.url = url;
    this.token = token;
    if (typeof skin !== 'undefined') {
      this.data = skin;
    }
  }

  _createClass(Skin, [{
    key: 'getSkins',
    value: function getSkins(query) {
      var _this = this;

      var queryString = queryFn.setQueryString(query);
      var skins = axios.get(this.url + '/' + api + '?' + queryString, {
        headers: { 'Authorization': 'Bearer ' + this.token }
      });

      return skins.then(function (result) {
        var Skins = new Array();
        result.data.forEach(function (skin) {
          Skins.push(new Skin(_this.url, _this.token, skin));
        });
        return Skins;
      }).catch(function (error) {
        return error.code;
      });
    }
  }, {
    key: 'getSkin',
    value: function getSkin(idSkin, query) {
      var _this2 = this;

      var queryString = queryFn.setQueryString(query);
      var skin = axios.get(this.url + '/' + api + '/' + idSkin + '?' + queryString, {
        headers: { 'Authorization': 'Bearer ' + this.token }
      });

      return skin.then(function (result) {
        return new Skin(_this2.url, _this2.token, result.data);
      }).catch(function (error) {
        return {
          statusCode: error.response.status,
          errors: error.response.data
        };
      });
    }
  }, {
    key: 'createSkin',
    value: function createSkin(skin) {
      var options = {
        method: 'POST',
        uri: this.url + '/' + api,
        formData: {
          name: skin.name,
          projectId: skin.projectId,
          userId: skin.userId,
          headerColor: skin.headerColor,
          logoMode: skin.logoMode,
          skinColorPrimary: skin.skinColorPrimary,
          skinColorSecondary: skin.skinColorSecondary,
          textColorPrimary: skin.textColorPrimary,
          textColorSecondary: skin.textColorSecondary,
          favicon: skin.favicon,
          logo: skin.logo
        },
        json: true,
        headers: {
          'Authorization': 'Bearer ' + this.token,
          'Content-Type': 'multipart/form-data; boundary=----WebKitFormBoundary7MA4YWxkTrZu0gW'
        }
      };
      var inThis = this;
      return rp(options).then(function (body) {
        return new Skin(inThis.url, inThis.token, body);
      }).catch(function (err) {
        return {
          statusCode: err.statusCode,
          errors: err.error.errors
        };
      });
    }
  }, {
    key: 'deleteSkin',
    value: function deleteSkin(idSkin) {
      if (typeof idSkin === 'undefined') {
        idSkin = this.data.id;
      }

      var del = axios.delete(this.url + '/' + api + '/' + idSkin, {
        headers: { 'Authorization': 'Bearer ' + this.token }
      });

      return del.then(function (result) {
        return result.status;
      }).catch(function (error) {
        return {
          statusCode: error.response.status,
          errors: error.response.data
        };
      });
    }
  }, {
    key: 'updateSkin',
    value: function updateSkin(skin, idSkin) {
      var _this3 = this;

      if (typeof idSkin === 'undefined') {
        idSkin = this.data.id;
      }
      var update = axios.patch(this.url + '/' + api + '/' + idSkin, skin, {
        headers: { 'Authorization': 'Bearer ' + this.token, 'Content-Type': 'application/json' }
      });

      return update.then(function (result) {
        _this3.data = result.data;
        return _this3;
      }).catch(function (error) {
        return {
          statusCode: error.response.status,
          errors: error.response.data
        };
      });
    }
  }, {
    key: 'replaceSkin',
    value: function replaceSkin(skin, idSkin) {
      var _this4 = this;

      if (typeof idSkin === 'undefined') {
        idSkin = this.data.id;
      }
      var update = axios.put(this.url + '/' + api + '/' + idSkin, skin, {
        headers: { 'Authorization': 'Bearer ' + this.token, 'Content-Type': 'application/json' }
      });

      return update.then(function (result) {
        _this4.data = result.data;
        return _this4;
      }).catch(function (error) {
        return {
          statusCode: error.response.status,
          errors: error.response.data
        };
      });
    }
  }]);

  return Skin;
}();

// module.exports ={
//   getSkins,
//   createSkin,
//   setUrl,
//   getSkin,
//   deleteSkin,
//   updateSkin,
//   replaceSkin,
//   setAuthToken
// }

// var createSkin = (token, url, skin) => {
//
//   let data = new FormData();
//   data.append('name', skin.name);
//   data.append('projectId', skin.projectId);
//   data.append('userId', skin.userId);
//   data.append('headerColor', skin.headerColor);
//   data.append('logoMode', skin.logoMode);
//   data.append('skinColorPrimary', skin.skinColorPrimary);
//   data.append('skinColorSecondary', skin.skinColorSecondary);
//   data.append('textColorPrimary', skin.textColorPrimary);
//   data.append('textColorSecondary', skin.textColorSecondary);
//   // data.append('favicon', skin.favicon);
//   // data.append('logo', skin.logo);
//
//   console.log(skin);
//   const create = axios.post(`${url}/${api}`, data, {
//     headers: {'Authorization': 'Bearer ' + token, 'Content-Type': 'multipart/form-data; boundary=----WebKitFormBoundary7MA4YWxkTrZu0gW'},
//     maxRedirects: 0
//   });
//
//   return create.then(result => {
//     return result.data;
//   })
//   .catch(error => {
//     return {
//       error: error,
//       // data: error.config.data
//       // header: error.request.headers,
//       // res: error.request.res,
//       statusCode: error.response.status,
//       errors: error.response.data
//     };
//   });
// };