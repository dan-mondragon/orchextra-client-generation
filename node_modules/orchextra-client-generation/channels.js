'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var axios = require('axios');
var api = 'v1/channels';
var queryFn = require('./fn/QueryString');

module.exports = function () {
  function Channel(url, token, channel) {
    _classCallCheck(this, Channel);

    this.url = url;
    this.token = token;
    if (typeof channel !== 'undefined') {
      this.data = channel;
    }
  }

  _createClass(Channel, [{
    key: 'getChannels',
    value: function getChannels(query) {
      var _this = this;

      var queryString = queryFn.setQueryString(query);
      var channels = axios.get(this.url + '/' + api + '?' + queryString, {
        headers: { 'Authorization': 'Bearer ' + this.token }
      });

      return channels.then(function (result) {
        var Channels = new Array();
        result.data.forEach(function (channel) {
          Channels.push(new Channel(_this.url, _this.token, channel));
        });
        return Channels;
      }).catch(function (error) {
        return {
          statusCode: error.response.status,
          errors: error.response.data
        };
      });
    }
  }, {
    key: 'getChannel',
    value: function getChannel(idChannel, query) {
      var _this2 = this;

      var queryString = queryFn.setQueryString(query);
      var channel = axios.get(this.url + '/' + api + '/' + idChannel + '?' + queryString, {
        headers: { 'Authorization': 'Bearer ' + this.token }
      });

      return channel.then(function (result) {
        return new Channel(_this2.url, _this2.token, result.data);
      }).catch(function (error) {
        return {
          statusCode: error.response.status,
          errors: error.response.data
        };
      });
    }
  }, {
    key: 'createChannel',
    value: function createChannel(channel) {
      var _this3 = this;

      var add = axios.post(this.url + '/' + api, channel, {
        headers: { 'Authorization': 'Bearer ' + this.token, 'Content-Type': 'application/json' }
      });

      return add.then(function (result) {
        return new Channel(_this3.url, _this3.token, result.data);
      }).catch(function (error) {
        return {
          statusCode: error.response.status,
          errors: error.response.data
        };
      });
    }
  }, {
    key: 'deleteChannel',
    value: function deleteChannel(channelId) {
      if (typeof channelId === 'undefined') {
        channelId = this.data.id;
      }
      var del = axios.delete(this.url + '/' + api + '/' + channelId, {
        headers: { 'Authorization': 'Bearer ' + this.token }
      });

      return del.then(function (result) {
        return result.status;
      }).catch(function (error) {
        return {
          statusCode: error.response.status,
          errors: error.response.data
        };
      });
    }
  }, {
    key: 'updateChannel',
    value: function updateChannel(channel, channelId) {
      var _this4 = this;

      if (typeof channelId === 'undefined') {
        channelId = this.data.id;
      }
      if (typeof channel === 'undefined') {
        channel = this.data;
      }
      var update = axios.patch(this.url + '/' + api + '/' + channelId, channel, {
        headers: { 'Authorization': 'Bearer ' + this.token, 'Content-Type': 'application/json' }
      });

      return update.then(function (result) {
        _this4.data = result.data;
        return _this4;
      }).catch(function (error) {
        return {
          statusCode: error.response.status,
          errors: error.response.data
        };
      });
    }
  }, {
    key: 'replaceChannel',
    value: function replaceChannel(channel, channelId) {
      var _this5 = this;

      if (typeof channelId === 'undefined') {
        channelId = this.data.id;
      }
      var update = axios.put(this.url + '/' + api + '/' + channelId, channel, {
        headers: { 'Authorization': 'Bearer ' + this.token, 'Content-Type': 'application/json' }
      });

      return update.then(function (result) {
        _this5.data = result.data;
        return _this5;
      }).catch(function (error) {
        return {
          statusCode: error.response.status,
          errors: error.response.data
        };
      });
    }
  }]);

  return Channel;
}();

// module.exports = {
//   getChannels,
//   getChannel,
//   createChannel,
//   deleteChannel,
//   updateChannel,
//   replaceChannel,
//   setUrl,
//   setAuthToken
// }