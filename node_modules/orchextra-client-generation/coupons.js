'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var axios = require('axios');
var api = 'v1/coupons';
var queryFn = require('./fn/QueryString');

module.exports = function () {
  function Coupon(url, token, coupon) {
    _classCallCheck(this, Coupon);

    this.url = url;
    this.token = token;
    if (typeof coupon !== 'undefined') {
      this.data = coupon;
    }
  }

  _createClass(Coupon, [{
    key: 'getCoupons',
    value: function getCoupons(query) {
      var _this = this;

      var queryString = queryFn.setQueryString(query);
      var coupons = axios.get(this.url + '/' + api + '?' + queryString, {
        headers: { 'Authorization': 'Bearer ' + this.token }
      });

      return coupons.then(function (result) {
        var Coupons = new Array();
        result.data.forEach(function (coupon) {
          Coupons.push(new Coupon(_this.url, _this.token, coupon));
        });
        return Coupons;
      }).catch(function (error) {
        return {
          statusCode: error.response.status,
          errors: error.response.data
        };
      });
    }
  }, {
    key: 'getCoupon',
    value: function getCoupon(idCustomer, query) {
      var _this2 = this;

      var queryString = queryFn.setQueryString(query);
      var coupon = axios.get(this.url + '/' + api + '/' + idCustomer + '?' + queryString + '}', {
        headers: { 'Authorization': 'Bearer ' + this.token }
      });

      return coupon.then(function (result) {
        return new Coupon(_this2.url, _this2.token, result.data);
      }).catch(function (error) {
        return {
          statusCode: error.response.status,
          errors: error.response.data
        };
      });
    }
  }]);

  return Coupon;
}();

// module.exports = {
//   getCoupons,
//   getCoupon,
//   setUrl,
//   setAuthToken
// };