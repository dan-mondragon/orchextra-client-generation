'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var axios = require('axios');
var api = 'v1/clients';
var queryFn = require('./fn/QueryString');

module.exports = function () {
  function Client(url, token, client) {
    _classCallCheck(this, Client);

    this.url = url;
    this.token = token;
    if (typeof client !== 'undefined') {
      this.data = client;
    }
  }

  _createClass(Client, [{
    key: 'getClients',
    value: function getClients(query) {
      var _this = this;

      var queryString = queryFn.setQueryString(query);
      var clients = axios.get(this.url + '/' + api + '?' + queryString, {
        headers: { 'Authorization': 'Bearer ' + this.token }
      });

      return clients.then(function (result) {
        var Clients = new Array();
        result.data.forEach(function (client) {
          Clients.push(new Client(_this.url, _this.token, client));
        });
        return Clients;
      }).catch(function (error) {
        return {
          statusCode: error.response.status,
          errors: error.response.data
        };
      });
    }
  }, {
    key: 'getClient',
    value: function getClient(clientId, query) {
      var _this2 = this;

      var queryString = queryFn.setQueryString(query);
      var client = axios.get(this.url + '/' + api + '/' + clientId + '?' + queryString, {
        headers: { 'Authorization': 'Bearer ' + this.token }
      });

      return client.then(function (result) {
        return new Client(_this2.url, _this2.token, result.data);
      }).catch(function (error) {
        return {
          statusCode: error.response.status,
          errors: error.response.data
        };
      });
    }
  }, {
    key: 'createClient',
    value: function createClient(client) {
      var _this3 = this;

      var add = axios.post(this.url + '/' + api, {
        type: client.type,
        name: client.name,
        clientId: client.clientId,
        clientSecret: client.clientSecret,
        userId: client.userId
      }, {
        headers: { 'Authorization': 'Bearer ' + this.token, 'Content-Type': 'application/json' }
      });

      return add.then(function (result) {
        return new Client(_this3.url, _this3.token, result.data);
      }).catch(function (error) {
        return {
          statusCode: error.response.status,
          errors: error.response.data
        };
      });
    }
  }, {
    key: 'deleteClient',
    value: function deleteClient(clientId) {
      if (typeof clientId === 'undefined') {
        clientId = this.data.id;
      }
      var del = axios.delete(this.url + '/' + api + '/' + clientId, {
        headers: { 'Authorization': 'Bearer ' + this.token }
      });

      return del.then(function (result) {
        return result.status;
      }).catch(function (error) {
        return {
          statusCode: error.response.status,
          errors: error.response.data
        };
      });
    }
  }, {
    key: 'replaceClient',
    value: function replaceClient(client, clientId) {
      var _this4 = this;

      if (typeof clientId === 'undefined') {
        clientId = this.data.id;
      }
      var replace = axios.put(this.url + '/' + api + '/' + clientId, {
        type: client.type,
        name: client.name,
        clientId: client.clientId,
        clientSecret: client.clientSecret,
        userId: client.userId
      }, {
        headers: { 'Authorization': 'Bearer ' + this.token }
      });

      return replace.then(function (result) {
        _this4.data = result.data;
        return _this4;
      }).catch(function (error) {
        return {
          statusCode: error.response.status,
          errors: error.response.data
        };
      });
    }
  }, {
    key: 'updateClient',
    value: function updateClient(client, clientId) {
      var _this5 = this;

      if (typeof clientId === 'undefined') {
        clientId = this.data.id;
      }
      if (typeof client === 'undefined') {
        client = this.data;
      }
      var update = axios.patch(this.url + '/' + api + '/' + clientId, {
        type: client.type,
        name: client.name,
        clientId: client.clientId,
        clientSecret: client.clientSecret,
        userId: client.userId
      }, {
        headers: { 'Authorization': 'Bearer ' + this.token }
      });

      return update.then(function (result) {
        _this5.data = result.data;
        return _this5;
      }).catch(function (error) {
        return {
          statusCode: error.response.status,
          errors: error.response.data
        };
      });
    }
  }]);

  return Client;
}();

// module.exports = {
//   getClients,
//   getClient,
//   createClient,
//   deleteClient,
//   replaceClient,
//   setUrl,
//   setAuthToken
// };