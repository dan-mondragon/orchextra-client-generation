'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var axios = require('axios');
var api = 'v1/campaigns';
var rp = require('request-promise');
var queryFn = require('./fn/QueryString');

module.exports = function () {
  function Campaign(url, token, campaign) {
    _classCallCheck(this, Campaign);

    this.url = url;
    this.token = token;
    if (typeof campaign !== 'undefined') {
      this.data = campaign;
    }
  }

  _createClass(Campaign, [{
    key: 'getCampaigns',
    value: function getCampaigns(query) {
      var _this = this;

      var queryString = queryFn.setQueryString(query);
      var campaigns = axios.get(this.url + '/' + api + '?' + queryString, {
        headers: { 'Authorization': 'Bearer ' + this.token }
      });

      return campaigns.then(function (result) {
        var Campaigns = new Array();
        result.data.forEach(function (campaign) {
          Campaigns.push(new Campaign(_this.url, _this.token, campaign));
        });
        return Campaigns;
      }).catch(function (error) {
        return error.code;
      });
    }
  }, {
    key: 'getCampaign',
    value: function getCampaign(idCampaign, query) {
      var _this2 = this;

      var queryString = queryFn.setQueryString(query);
      var campaign = axios.get(this.url + '/' + api + '/' + idCampaign + '?' + queryString, {
        headers: { 'Authorization': 'Bearer ' + this.token }
      });

      return campaign.then(function (result) {
        return new Campaign(_this2.url, _this2.token, result.data);
      }).catch(function (error) {
        return {
          statusCode: error.response.status,
          errors: error.response.data
        };
      });
    }
  }, {
    key: 'createCampaign',
    value: function createCampaign(campaign) {
      var options = {
        method: 'POST',
        uri: this.url + '/' + api,
        formData: {
          type: campaign.type,
          name: campaign.name,
          legals: campaign.legals,
          description: campaign.description,
          active: campaign.active,
          expirationDate: campaign.expirationDate,
          startDate: campaign.startDate,
          projectId: campaign.projectId,
          image: campaign.image
        },
        json: true,
        headers: {
          'Authorization': 'Bearer ' + this.token,
          'Content-Type': 'multipart/form-data; boundary=----WebKitFormBoundary7MA4YWxkTrZu0gW'
        }
      };
      var inThis = this;
      return rp(options).then(function (body) {
        console.log(inThis);
        return new Campaign(inThis.url, inThis.token, body);
      }).catch(function (err) {
        console.log(err);
        return {
          statusCode: err.statusCode,
          errors: err.error.errors
        };
      });
    }
  }, {
    key: 'deleteCampaign',
    value: function deleteCampaign(idCampaign) {
      if (typeof idCampaign === 'undefined') {
        idCampaign = this.data.id;
      }
      var del = axios.delete(this.url + '/' + api + '/' + idCampaign, {
        headers: { 'Authorization': 'Bearer ' + this.token }
      });

      return del.then(function (result) {
        return result.status;
      }).catch(function (error) {
        return {
          statusCode: error.response.status,
          errors: error.response.data
        };
      });
    }
  }, {
    key: 'updateCampaign',
    value: function updateCampaign(campaign, campaignId) {
      var _this3 = this;

      if (typeof campaignId === 'undefined') {
        campaignId = this.data.id;
      }
      if (typeof campaign === 'undefined') {
        campaign = this.data;
      }
      console.log(campaignId);
      console.log(campaign);
      var update = axios.patch(this.url + '/' + api + '/' + campaignId, campaign, {
        headers: { 'Authorization': 'Bearer ' + this.token, 'Content-Type': 'application/json' }
      });

      return update.then(function (result) {
        _this3.data = result.data;
        return _this3;
      }).catch(function (error) {
        return {
          statusCode: error.response.status,
          errors: error.response.data
        };
      });
    }
  }, {
    key: 'replaceCampaign',
    value: function replaceCampaign(campaign, campaignId) {
      var _this4 = this;

      if (typeof campaignId === 'undefined') {
        campaignId = this.data.id;
      }
      // console.log(campaign);
      // console.log(campaignId);
      var update = axios.put(this.url + '/' + api + '/' + campaignId, campaign, {
        headers: { 'Authorization': 'Bearer ' + this.token, 'Content-Type': 'application/json' }
      });
      return update.then(function (result) {
        _this4.data = result.data;
        return _this4;
      }).catch(function (error) {
        return {
          statusCode: error.response.status,
          errors: error.response.data
        };
      });
    }
  }]);

  return Campaign;
}();

// module.exports = {
//   getCampaigns,
//   getCampaign,
//   deleteCampaign,
//   createCampaign,
//   setUrl,
//   setAuthToken,
//   updateCampaign,
//   replaceCampaign
// };