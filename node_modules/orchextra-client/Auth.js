'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _User = require('./User');

var _User2 = _interopRequireDefault(_User);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var rp = require('request-promise');

var Auth = function () {
    /**
     *
     * @param url
     */
    function Auth(url) {
        _classCallCheck(this, Auth);

        this.url = url;
    }

    /**
     *
     * @param clientId
     * @param clientSecret
     * @returns {*|Promise.<TResult>}
     */


    _createClass(Auth, [{
        key: 'authClient',
        value: function authClient(clientId, clientSecret) {
            var options = {
                method: 'POST',
                uri: this.url + '/auth',
                body: {
                    clientId: clientId,
                    clientSecret: clientSecret
                },
                json: true
                /**
                 *
                 * @type {Auth}
                 */
            };var self = this;
            return rp(options).then(function (parsedBody) {
                self.token = parsedBody.token;
                self.expiresIn = parsedBody.expiresIn;
                return self;
            });
        }

        /**
         *
         * @param username
         * @param password
         * @returns {*|Promise.<TResult>}
         */

    }, {
        key: 'loginUser',
        value: function loginUser(username, password) {
            var options = {
                method: 'POST',
                uri: this.url + '/login',
                body: {
                    username: username,
                    password: password
                },
                json: true
            };

            return rp(options).then(function (parsedBody) {
                return new _User2.default(parsedBody);
            });
        }

        /**
         *
         * @returns token
         */

    }, {
        key: 'getToken',
        value: function getToken() {
            return this.token;
        }

        /**
         *
         * @returns expiresIn
         */

    }, {
        key: 'getExpiresIn',
        value: function getExpiresIn() {
            return this.expiresIn;
        }
    }]);

    return Auth;
}();

exports.default = Auth;
module.exports = exports['default'];